// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package bootstrap

import (
	"github.com/weplanx/openapi/api"
	"github.com/weplanx/openapi/api/geo"
	"github.com/weplanx/openapi/api/index"
	"github.com/weplanx/openapi/api/qrcode"
	"github.com/weplanx/openapi/common"
)

// Injectors from wire.go:

func NewAPI() (*api.API, error) {
	values, err := LoadValues()
	if err != nil {
		return nil, err
	}
	client, err := UseMongoDB(values)
	if err != nil {
		return nil, err
	}
	database := UseDatabase(client, values)
	conn, err := UseNats(values)
	if err != nil {
		return nil, err
	}
	jetStreamContext, err := UseJetStream(conn)
	if err != nil {
		return nil, err
	}
	inject := &common.Inject{
		Values:    values,
		Mongo:     client,
		Db:        database,
		Nats:      conn,
		JetStream: jetStreamContext,
	}
	hertz, err := UseHertz(values)
	if err != nil {
		return nil, err
	}
	service := &index.Service{
		Inject: inject,
	}
	controller := &index.Controller{
		IndexService: service,
	}
	geoService := &geo.Service{
		Inject: inject,
	}
	geoController := &geo.Controller{
		Service: geoService,
	}
	qrcodeService := &qrcode.Service{
		Inject: inject,
	}
	qrcodeController := &qrcode.Controller{
		Service: qrcodeService,
	}
	apiAPI := &api.API{
		Inject:           inject,
		Hertz:            hertz,
		IndexController:  controller,
		IndexService:     service,
		GeoController:    geoController,
		GeoService:       geoService,
		QrcodeController: qrcodeController,
		QrcodeService:    qrcodeService,
	}
	return apiAPI, nil
}
